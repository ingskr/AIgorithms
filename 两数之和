给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
示例:
给定 nums = [2, 7, 11, 15], target = 9
因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
解法1
暴力法：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
    //vector定义向量，能够操作多种数据结构和算法的模板类和函数库，vector<int>$ nums为twoSum取别名为nums
        int i,j;
        for(i=0;i<nums.size()-1;i++)
        {
            for(j=i+1;j<nums.size();j++)
            {
                if(nums[i]+nums[j]==target)
                {
                   return {i,j};
                }
            }
        }
        return {i,j};
    };
};
解法2
利用map是红黑树的特性，将nums中的以[值，下标]的形式存储在一个map中，
再逐个检查nums所需的元素（target-nums）是否存在于map中，若存在且并非自身，即找到。
class Solution{
public:
    vector<int> twoSum(vector<int>& nums, int target)
    {
    map<int,int> mNum;
    vector<int> vAns;
    for(int i = 0;i < nums.size();i++)
        mNum[nums.at(i)] = i;
    for(int i = 0 ;i< nums.size();i++){
        int temp = target - nums.at(i);
        if(mNum.count(temp) && mNum[temp] != i){
            vAns.push_back(i);
            vAns.push_back(mNum[temp]);
            return vAns;
        }
    }
    return vAns;
    
    }
};
